kind: Template
apiVersion: v1
metadata:
  name: mongod-replica
  annotations:
    description: "MongoDB Replication Example."
    iconClass: "icon-mongodb"
    tags: "mongodb,replica"
parameters:
  - name: MONGODB_IMAGE
    displayName: "MongoDB Container Image"
    description: "A reference to a supported MongoDB container image."
    value: "simagix/mongo-oc-repl:3.6"
    required: true

  - name: MONGODB_SERVICE_NAME
    displayName: "OpenShift Service Name"
    description: "The name of the OpenShift Service exposed for the database."
    value: ocmongo
    required: true

objects:
  # A non-headless service which takes pod readiness into consideration
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}"
    spec:
      # the list of ports that are exposed by this service
      ports:
        - name: ocmongo
          port: 27017
      # will route traffic to pods having labels matching this selector
      selector:
        name: "${MONGODB_SERVICE_NAME}"

  # A headless service to create DNS records
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}-internal"
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    spec:
      clusterIP: None
      # the list of ports that are exposed by this service
      ports:
        - name: ocmongo
          port: 27017
      # will route traffic to pods having labels matching this selector
      selector:
        name: "${MONGODB_SERVICE_NAME}"

  - kind: StatefulSet
    apiVersion: apps/v1beta1
    metadata:
      name: "${MONGODB_SERVICE_NAME}"
    spec:
      # pets get DNS/hostnames that follow the pattern: ${metadata.name}-NUM.${spec.serviceName}.default.svc.cluster.local
      serviceName: "${MONGODB_SERVICE_NAME}-internal"
      replicas: 3
      # describes the pod that will be created if insufficient replicas are detected
      template:
        metadata:
          # this label will be used for count running pods
          labels:
            name: "${MONGODB_SERVICE_NAME}"
        spec:
          containers:
            - name: mongo-container
              image: "${MONGODB_IMAGE}"
              ports:
                - containerPort: 27017
              args:
                - "/entrypoint.sh"
                - "rs1"
              volumeMounts:
                - name: mongo-data
                  mountPath: "/data/db"
              env:
                - name: MONGODB_SERVICE_NAME
                  value: "${MONGODB_SERVICE_NAME}-internal"
              resources:
                limits:
                  memory: "256Mi"
      volumeClaimTemplates:
        - metadata:
            name: mongo-data
          spec:
            # the volume can be mounted as read-write by a single node
            accessModes: [ ReadWriteOnce ]
            resources:
              requests:
                storage: "1Gi"
